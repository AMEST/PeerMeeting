// Copyright 2021 Klabukov Erik.
// SPDX-License-Identifier: GPL-3.0-only
/*eslint-disable*/
const ThemeHelper = function() {
 
  const preloadTheme = (href) => {
    let link = document.createElement('link');
    link.rel = "stylesheet";
    link.href = href;
    document.head.appendChild(link);
    
    return new Promise((resolve, reject) => {
      link.onload = e => {
        const sheet = e.target.sheet;
        sheet.disabled = true;
        resolve(sheet);
      };
      link.onerror = reject;
    });
  };
  
  const selectTheme = (themes, name) => {
    if (name && !themes[name]) {
      throw new Error(`"${name}" has not been defined as a theme.`); 
    }
    Object.keys(themes).forEach(n => themes[n].disabled = (n !== name));
  }

  const availableThemes = {
    dark: "/css/bootstrap.dark.min.css",
    default: "/css/bootstrap.default.css"
    };
  
  let themes = {};

  return {
    init() {
        var themeLoader = Object.keys(availableThemes).map(n => preloadTheme(availableThemes[n]).then(s => themes[n] = s));
        return Promise.all(themeLoader).then(sheets => {
            console.log(`${sheets.length} themes loaded`);
            selectTheme(themes, "default");
          });
    },
    add(name, href) { return preloadTheme(href).then(s => themes[name] = s) },
    set theme(name) { selectTheme(themes, name) },
    get theme() { return Object.keys(themes).find(n => !themes[n].disabled) },
    get themes() { return Object.keys(themes) }
  };
};

export default ThemeHelper;